import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.*;

public class Main {

    public static double parametr_a;
    public static Map<String, List<List<Float>>> trainMap = null;
    public static Map<String, List<List<Float>>> testMap = null;
    public static int iloscArg = 0;

    public static void main(String[] args) {
        parametr_a = Double.parseDouble(args[0]);
        final String path_To_Train_Set = args[1];
        final String path_To_Test_Set = args[2];

        trainMap = sort(readFile(path_To_Train_Set));
        testMap = sort(readFile(path_To_Test_Set));

        Perceptron perceptron = new Perceptron(parametr_a, iloscArg);
        perceptron.trainPerceptron(trainMap, false);
        perceptron.testPerceptron(testMap, false, 0.0);

        boolean times = true;
        while (true){
            Scanner s = new Scanner(System.in);
            if (times){
                System.out.print("If you want to increase accuracy please write new accuracy: ");
                String newAccur =  s.nextLine();
                if (newAccur != "" && Double.parseDouble(newAccur) <= 1.0){
                    perceptron.testPerceptron(testMap, false,Double.parseDouble(newAccur));
                    times = false;
                }
            }
            System.out.println("Write your vektor");

            perceptron.whatGrup(s.nextLine());

        }

    }

    public static List<String> readFile(String readPath) {
        List<String> outList = new ArrayList<>();
        try {
            File file = new File(readPath);

            FileReader fr = new FileReader(file);
            BufferedReader reader = new BufferedReader(fr);
            String line = reader.readLine();

            while (line != null) {
                outList.add(line);
                line = reader.readLine();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return outList;
    }

    public static Map<String, List<List<Float>>> sort(List<String> mainList) {

        Map<String, List<List<Float>>> map = new HashMap<>();
        List<String> groupList = new ArrayList<>();



        for (String s : mainList) {
            if (!s.equals("")) {
                String[] str = s.split(";");

                if (!groupList.contains(str[str.length-1])){
                    groupList.add(str[str.length-1]);
                }
            }
        }
        groupList.stream().forEach(x -> {
            map.put(x, new ArrayList<>());
        });

        String[] str = null;
        for (String s : mainList) {
            if (!s.equals("")){
                str = s.split(";");
                List<Float> flList = new ArrayList<>();
                for (int i = 0; i < str.length - 1; i++) {
                    flList.add(Float.parseFloat(str[i]));
                }
                map.get(str[str.length-1]).add(flList);
            }
        }
        iloscArg = str.length-1;


        return map;
    }

}

class Perceptron {

    double[] wags;
    double prog;
    double parametr_a;
    Map<String, List<List<Float>>> testMap = null;
    Map<String, List<List<Float>>> trainMap = null;
    double howLong;
    String[] grups;

    public Perceptron(double parametr_a, int rozmiarWektora) {
        this.wags = new double[rozmiarWektora];
        Random r = new Random();

        for (int i = 0; i < wags.length ; i++) {
            wags[i] = r.nextDouble()*5-5;
        }
        this.prog = r.nextDouble()*5-5;
        this.parametr_a = parametr_a;
    }

    public void trainPerceptron(Map<String, List<List<Float>>> trainMap, boolean testAgain){
        this.trainMap = trainMap;
        this.grups = trainMap.keySet().toArray(new String[0]);
        for (String x: grups) {
            for (int i = 0; i < trainMap.get(x).size(); i++) {
                double sum = 0;
                List<Float> list = new ArrayList<>();
                for (int j = 0; j < trainMap.get(x).get(i).size(); j++) {
                    sum += trainMap.get(x).get(i).get(j)*wags[j];
                    list.add(trainMap.get(x).get(i).get(j));
                    if (j == trainMap.get(x).get(i).size()-1){
                        int y;
                        if (sum >= prog){
                            y = 1;
                        }else {
                            y = 0;
                        }

                        int d;
                        if (!grups[y].equals(x)){
                            if (y == 1){
                                d = 0;
                            }else{
                                d = 1;
                            }

                            for (int k = 0; k < wags.length; k++) {
                                wags[k] = wags[k] + (d-y)*parametr_a * list.get(k);
                            }
                            prog = prog-(d-y)*parametr_a;
                        }
                    }
                }
            }
        }
        if (testAgain){
            testPerceptron(this.testMap, false, this.howLong);
        }
    }

    public void testPerceptron(Map<String, List<List<Float>>> testMap, boolean print, double howLong){
        this.testMap = testMap;
        this.howLong = howLong;

        int all = 0;
        int ok = 0;
        int all01 = 0;
        int ok01 = 0;
        int all02 = 0;
        int ok02 = 0;
        for (String x:grups) {
            for (int i = 0; i < testMap.get(x).size(); i++) {
                double sum = 0;
                List<Float> list = new ArrayList<>();
                all++;
                if (x.equals(grups[0])){
                    all01++;
                }else{
                    all02++;
                }
                for (int j = 0; j < testMap.get(x).get(i).size(); j++) {
                    sum += testMap.get(x).get(i).get(j)*wags[j];
                    list.add(testMap.get(x).get(i).get(j));
                    if (j == testMap.get(x).get(i).size()-1){
                        int y;
                        if (sum-prog >= 0){
                            y = 1;
                        }else {
                            y = 0;
                        }

                        if (grups[y].equals(x)) {
                            ok++;
                            if (x.equals(grups[0])){
                                ok01++;
                            }else{
                                ok02++;
                            }
                        }
                    }
                }
            }
        }

        if (!print){
            if ((double) ok/all < howLong){
                trainPerceptron(trainMap, true);
            }else{
                testPerceptron(this.testMap, true, howLong);
            }
        }else{
            System.out.println("For all grups --> " + (double)ok/all);
            System.out.println(grups[0] +" --> " + (double)ok01/all01);
            System.out.println(grups[1] +" --> " + (double)ok02/all02);
        }
    }

    public void whatGrup(String str){
        List<Float> list = new ArrayList<>();
        String[] strT = str.split(";");
        for (String s: strT) {
            list.add(Float.parseFloat(s));
        }

        double sum = 0;
        for (int i = 0; i < list.size() ; i++) {
            sum += list.get(i)*wags[i];
        }
        if (sum - prog >= 0 ){
            System.out.println(this.grups[1]);
        }else{
            System.out.println(this.grups[0]);
        }
    }
}

